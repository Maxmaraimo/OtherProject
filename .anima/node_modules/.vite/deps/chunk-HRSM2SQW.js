import {
  __commonJS
} from "./chunk-WGAPYIUP.js";

// node_modules/@yaireo/tagify/dist/tagify.min.js
var require_tagify_min = __commonJS({
  "node_modules/@yaireo/tagify/dist/tagify.min.js"(exports, module) {
    !function(t, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).Tagify = e();
    }(exports, function() {
      "use strict";
      function t(e2) {
        return (t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t2) {
          return typeof t2;
        } : function(t2) {
          return t2 && "function" == typeof Symbol && t2.constructor === Symbol && t2 !== Symbol.prototype ? "symbol" : typeof t2;
        })(e2);
      }
      function e(t2, e2, i2) {
        return e2 in t2 ? Object.defineProperty(t2, e2, { value: i2, enumerable: true, configurable: true, writable: true }) : t2[e2] = i2, t2;
      }
      function i(t2, e2) {
        var i2 = Object.keys(t2);
        if (Object.getOwnPropertySymbols) {
          var s2 = Object.getOwnPropertySymbols(t2);
          e2 && (s2 = s2.filter(function(e3) {
            return Object.getOwnPropertyDescriptor(t2, e3).enumerable;
          })), i2.push.apply(i2, s2);
        }
        return i2;
      }
      function s(t2) {
        for (var s2 = 1; s2 < arguments.length; s2++) {
          var a2 = null != arguments[s2] ? arguments[s2] : {};
          s2 % 2 ? i(Object(a2), true).forEach(function(i2) {
            e(t2, i2, a2[i2]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t2, Object.getOwnPropertyDescriptors(a2)) : i(Object(a2)).forEach(function(e2) {
            Object.defineProperty(t2, e2, Object.getOwnPropertyDescriptor(a2, e2));
          });
        }
        return t2;
      }
      function a(t2) {
        return function(t3) {
          if (Array.isArray(t3))
            return n(t3);
        }(t2) || function(t3) {
          if ("undefined" != typeof Symbol && Symbol.iterator in Object(t3))
            return Array.from(t3);
        }(t2) || function(t3, e2) {
          if (!t3)
            return;
          if ("string" == typeof t3)
            return n(t3, e2);
          var i2 = Object.prototype.toString.call(t3).slice(8, -1);
          "Object" === i2 && t3.constructor && (i2 = t3.constructor.name);
          if ("Map" === i2 || "Set" === i2)
            return Array.from(t3);
          if ("Arguments" === i2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i2))
            return n(t3, e2);
        }(t2) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }();
      }
      function n(t2, e2) {
        (null == e2 || e2 > t2.length) && (e2 = t2.length);
        for (var i2 = 0, s2 = new Array(e2); i2 < e2; i2++)
          s2[i2] = t2[i2];
        return s2;
      }
      var o = function(t2, e2, i2) {
        return i2 ? t2 == e2 : ("" + t2).toLowerCase() == ("" + e2).toLowerCase();
      };
      function r(t2) {
        var e2 = Object.prototype.toString.call(t2).split(" ")[1].slice(0, -1);
        return t2 === Object(t2) && "Array" != e2 && "Function" != e2 && "RegExp" != e2 && "HTMLUnknownElement" != e2;
      }
      function l(t2) {
        var e2 = document.createElement("div");
        return t2.replace(/\&#?[0-9a-z]+;/gi, function(t3) {
          return e2.innerHTML = t3, e2.innerText;
        });
      }
      function d(t2) {
        return t2.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/`|'/g, "&#039;");
      }
      function c(t2, e2, i2) {
        function s2(t3, e3) {
          for (var i3 in e3)
            e3.hasOwnProperty(i3) && (r(e3[i3]) ? r(t3[i3]) ? s2(t3[i3], e3[i3]) : t3[i3] = Object.assign({}, e3[i3]) : t3[i3] = e3[i3]);
        }
        return t2 instanceof Object || (t2 = {}), s2(t2, e2), i2 && s2(t2, i2), t2;
      }
      function h(t2) {
        return String.prototype.normalize ? "string" == typeof t2 ? t2.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : void 0 : t2;
      }
      var g = { init: function() {
        this.DOM.dropdown = this.parseTemplate("dropdown", [this.settings]), this.DOM.dropdown.content = this.DOM.dropdown.querySelector("." + this.settings.classNames.dropdownWrapper);
      }, show: function(t2) {
        var e2, i2, s2, a2 = this, n2 = this.settings, l2 = window.getSelection(), d2 = "mix" == n2.mode && !n2.enforceWhitelist, c2 = !n2.whitelist || !n2.whitelist.length, h2 = "manual" == n2.dropdown.position;
        if ((!c2 || d2 || n2.templates.dropdownItemNoMatch) && false !== n2.dropdown.enable && !this.state.isLoading) {
          if (clearTimeout(this.dropdownHide__bindEventsTimeout), this.suggestedListItems = this.dropdown.filterListItems.call(this, t2), t2 && !this.suggestedListItems.length && (this.trigger("dropdown:noMatch", t2), n2.templates.dropdownItemNoMatch && (s2 = n2.templates.dropdownItemNoMatch.call(this, { value: t2 }))), !s2) {
            if (this.suggestedListItems.length)
              t2 && d2 && !this.state.editing.scope && !o(this.suggestedListItems[0].value, t2) && this.suggestedListItems.unshift({ value: t2 });
            else {
              if (!t2 || !d2 || this.state.editing.scope)
                return this.input.autocomplete.suggest.call(this), void this.dropdown.hide.call(this);
              this.suggestedListItems = [{ value: t2 }];
            }
            i2 = "" + (r(e2 = this.suggestedListItems[0]) ? e2.value : e2), n2.autoComplete && i2 && 0 == i2.indexOf(t2) && this.input.autocomplete.suggest.call(this, e2);
          }
          this.dropdown.fill.call(this, s2), n2.dropdown.highlightFirst && this.dropdown.highlightOption.call(this, this.DOM.dropdown.content.children[0]), this.state.dropdown.visible || setTimeout(this.dropdown.events.binding.bind(this)), this.state.dropdown.visible = t2 || true, this.state.dropdown.query = t2, this.state.selection = { anchorOffset: l2.anchorOffset, anchorNode: l2.anchorNode }, h2 || setTimeout(function() {
            a2.dropdown.position.call(a2), a2.dropdown.render.call(a2);
          }), setTimeout(function() {
            a2.trigger("dropdown:show", a2.DOM.dropdown);
          });
        }
      }, hide: function(t2) {
        var e2 = this, i2 = this.DOM, s2 = i2.scope, a2 = i2.dropdown, n2 = "manual" == this.settings.dropdown.position && !t2;
        if (a2 && document.body.contains(a2) && !n2)
          return window.removeEventListener("resize", this.dropdown.position), this.dropdown.events.binding.call(this, false), s2.setAttribute("aria-expanded", false), a2.parentNode.removeChild(a2), setTimeout(function() {
            e2.state.dropdown.visible = false;
          }, 100), this.state.dropdown.query = this.state.ddItemData = this.state.ddItemElm = this.state.selection = null, this.state.tag && this.state.tag.value.length && (this.state.flaggedTags[this.state.tag.baseOffset] = this.state.tag), this.trigger("dropdown:hide", a2), this;
      }, render: function() {
        var t2, e2, i2, s2 = this, a2 = (t2 = this.DOM.dropdown, (i2 = t2.cloneNode(true)).style.cssText = "position:fixed; top:-9999px; opacity:0", document.body.appendChild(i2), e2 = i2.clientHeight, i2.parentNode.removeChild(i2), e2), n2 = this.settings;
        return this.DOM.scope.setAttribute("aria-expanded", true), document.body.contains(this.DOM.dropdown) || (this.DOM.dropdown.classList.add(n2.classNames.dropdownInital), this.dropdown.position.call(this, a2), n2.dropdown.appendTarget.appendChild(this.DOM.dropdown), setTimeout(function() {
          return s2.DOM.dropdown.classList.remove(n2.classNames.dropdownInital);
        })), this;
      }, fill: function(t2) {
        var e2;
        t2 = "string" == typeof t2 ? t2 : this.dropdown.createListHTML.call(this, t2 || this.suggestedListItems), this.DOM.dropdown.content.innerHTML = (e2 = t2) ? e2.replace(/\>[\r\n ]+\</g, "><").replace(/(<.*?>)|\s+/g, function(t3, e3) {
          return e3 || " ";
        }) : "";
      }, refilter: function(t2) {
        t2 = t2 || this.state.dropdown.query || "", this.suggestedListItems = this.dropdown.filterListItems.call(this, t2), this.suggestedListItems.length ? this.dropdown.fill.call(this) : this.dropdown.hide.call(this), this.trigger("dropdown:updated", this.DOM.dropdown);
      }, position: function(t2) {
        if ("manual" != this.settings.dropdown.position) {
          var e2, i2, s2, a2, n2, o2, r2, l2 = this.DOM.dropdown, d2 = document.documentElement.clientHeight, c2 = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0) > 480 ? this.settings.dropdown.position : "all", h2 = this.DOM["input" == c2 ? "input" : "scope"];
          t2 = t2 || l2.clientHeight, this.state.dropdown.visible && ("text" == c2 ? (a2 = (i2 = this.getCaretGlobalPosition()).bottom, s2 = i2.top, n2 = i2.left, o2 = "auto") : (r2 = function(t3) {
            for (var e3 = 0, i3 = 0; t3; )
              e3 += t3.offsetLeft || 0, i3 += t3.offsetTop || 0, t3 = t3.parentNode;
            return { left: e3, top: i3 };
          }(this.settings.dropdown.appendTarget), s2 = (i2 = h2.getBoundingClientRect()).top + 2 - r2.top, a2 = i2.bottom - 1 - r2.top, n2 = i2.left - r2.left, o2 = i2.width + "px"), s2 = Math.floor(s2), a2 = Math.ceil(a2), e2 = d2 - i2.bottom < t2, l2.style.cssText = "left:" + (n2 + window.pageXOffset) + "px; width:" + o2 + ";" + (e2 ? "top: " + (s2 + window.pageYOffset) + "px" : "top: " + (a2 + window.pageYOffset) + "px"), l2.setAttribute("placement", e2 ? "top" : "bottom"), l2.setAttribute("position", c2));
        }
      }, events: { binding: function() {
        var t2 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], e2 = this.dropdown.events.callbacks, i2 = this.listeners.dropdown = this.listeners.dropdown || { position: this.dropdown.position.bind(this), onKeyDown: e2.onKeyDown.bind(this), onMouseOver: e2.onMouseOver.bind(this), onMouseLeave: e2.onMouseLeave.bind(this), onClick: e2.onClick.bind(this), onScroll: e2.onScroll.bind(this) }, s2 = t2 ? "addEventListener" : "removeEventListener";
        "manual" != this.settings.dropdown.position && (window[s2]("resize", i2.position), window[s2]("keydown", i2.onKeyDown)), this.DOM.dropdown[s2]("mouseover", i2.onMouseOver), this.DOM.dropdown[s2]("mouseleave", i2.onMouseLeave), this.DOM.dropdown[s2]("mousedown", i2.onClick), this.DOM.dropdown.content[s2]("scroll", i2.onScroll);
      }, callbacks: { onKeyDown: function(t2) {
        var e2 = this.DOM.dropdown.querySelector("[class$='--active']"), i2 = e2;
        switch (t2.key) {
          case "ArrowDown":
          case "ArrowUp":
          case "Down":
          case "Up":
            var s2;
            t2.preventDefault(), i2 && (i2 = i2[("ArrowUp" == t2.key || "Up" == t2.key ? "previous" : "next") + "ElementSibling"]), i2 || (i2 = (s2 = this.DOM.dropdown.content.children)["ArrowUp" == t2.key || "Up" == t2.key ? s2.length - 1 : 0]), this.dropdown.highlightOption.call(this, i2, true);
            break;
          case "Escape":
          case "Esc":
            this.dropdown.hide.call(this);
            break;
          case "ArrowRight":
            if (this.state.actions.ArrowLeft)
              return;
          case "Tab":
            if ("mix" != this.settings.mode && i2 && !this.settings.autoComplete.rightKey && !this.state.editing) {
              t2.preventDefault();
              var a2 = i2.getAttribute("tagifySuggestionIdx"), n2 = a2 ? this.suggestedListItems[+a2] : "";
              return this.input.autocomplete.set.call(this, n2.value || n2), false;
            }
            return true;
          case "Enter":
            t2.preventDefault(), this.dropdown.selectOption.call(this, e2);
            break;
          case "Backspace":
            if ("mix" == this.settings.mode || this.state.editing.scope)
              return;
            var o2 = this.input.value.trim();
            "" != o2 && 8203 != o2.charCodeAt(0) || (true === this.settings.backspace ? this.removeTags() : "edit" == this.settings.backspace && setTimeout(this.editTag.bind(this), 0));
        }
      }, onMouseOver: function(t2) {
        var e2 = t2.target.closest("." + this.settings.classNames.dropdownItem);
        e2 && this.dropdown.highlightOption.call(this, e2);
      }, onMouseLeave: function(t2) {
        this.dropdown.highlightOption.call(this);
      }, onClick: function(t2) {
        var e2 = this;
        if (0 == t2.button && t2.target != this.DOM.dropdown) {
          var i2 = t2.target.closest("." + this.settings.classNames.dropdownItem);
          this.state.actions.selectOption = true, setTimeout(function() {
            return e2.state.actions.selectOption = false;
          }, 50), this.settings.hooks.suggestionClick(t2, { tagify: this, suggestionElm: i2 }).then(function() {
            i2 && e2.dropdown.selectOption.call(e2, i2);
          }).catch(function(t3) {
            return t3;
          });
        }
      }, onScroll: function(t2) {
        var e2 = t2.target, i2 = e2.scrollTop / (e2.scrollHeight - e2.parentNode.clientHeight) * 100;
        this.trigger("dropdown:scroll", { percentage: Math.round(i2) });
      } } }, highlightOption: function(t2, e2) {
        var i2, s2 = this.settings.classNames.dropdownItemActive;
        if (this.state.ddItemElm && (this.state.ddItemElm.classList.remove(s2), this.state.ddItemElm.removeAttribute("aria-selected")), !t2)
          return this.state.ddItemData = null, this.state.ddItemElm = null, void this.input.autocomplete.suggest.call(this);
        i2 = this.suggestedListItems[this.getNodeIndex(t2)], this.state.ddItemData = i2, this.state.ddItemElm = t2, t2.classList.add(s2), t2.setAttribute("aria-selected", true), e2 && (t2.parentNode.scrollTop = t2.clientHeight + t2.offsetTop - t2.parentNode.clientHeight), this.settings.autoComplete && (this.input.autocomplete.suggest.call(this, i2), this.dropdown.position.call(this));
      }, selectOption: function(t2) {
        var e2 = this, i2 = this.settings.dropdown, a2 = i2.clearOnSelect, n2 = i2.closeOnSelect;
        if (!t2)
          return this.addTags(this.input.value, true), void (n2 && this.dropdown.hide.call(this));
        var o2 = t2.getAttribute("tagifySuggestionIdx"), r2 = (o2 ? this.suggestedListItems[+o2] : "") || this.input.value;
        if (this.trigger("dropdown:select", { data: r2, elm: t2 }), this.state.editing ? this.onEditTagDone(this.state.editing.scope, s(s(s({}, this.state.editing.scope.__tagifyTagData), {}, { value: r2.value }, r2 instanceof Object ? r2 : {}), {}, { __isValid: true })) : this.addTags([r2], a2), setTimeout(function() {
          e2.DOM.input.focus(), e2.toggleFocusClass(true);
        }), n2)
          return this.dropdown.hide.call(this);
        this.dropdown.refilter.call(this);
      }, selectAll: function() {
        var t2 = this.settings.skipInvalid;
        return this.settings.skipInvalid = true, this.addTags(this.settings.whitelist, true), this.settings.skipInvalid = t2, this.dropdown.hide.call(this), this;
      }, filterListItems: function(t2) {
        var e2, i2, s2, a2, n2, o2 = this, l2 = this.settings, d2 = l2.dropdown, c2 = [], g2 = l2.whitelist, u2 = d2.maxItems || 1 / 0, p2 = d2.searchKeys, f2 = 0;
        if (!t2 || !p2.length)
          return (l2.duplicates ? g2 : g2.filter(function(t3) {
            return !o2.isTagDuplicate(r(t3) ? t3.value : t3);
          })).slice(0, u2);
        function m(t3, e3) {
          return e3.toLowerCase().split(" ").every(function(e4) {
            return t3.includes(e4.toLowerCase());
          });
        }
        for (n2 = d2.caseSensitive ? "" + t2 : ("" + t2).toLowerCase(); f2 < g2.length && (e2 = g2[f2] instanceof Object ? g2[f2] : { value: g2[f2] }, d2.fuzzySearch ? (s2 = p2.reduce(function(t3, i3) {
          return t3 + " " + (e2[i3] || "");
        }, "").toLowerCase(), i2 = m(d2.accentedSearch ? h(s2) : s2, n2)) : i2 = p2.some(function(t3) {
          var i3 = "" + (e2[t3] || "");
          return d2.accentedSearch && (i3 = h(i3), n2 = h(n2)), d2.caseSensitive || (i3 = i3.toLowerCase()), 0 == i3.indexOf(n2);
        }), a2 = !l2.duplicates && this.isTagDuplicate(r(e2) ? e2.value : e2), i2 && !a2 && u2-- && c2.push(e2), 0 != u2); f2++)
          ;
        return c2;
      }, createListHTML: function(t2) {
        var e2 = this;
        return t2.map(function(t3, i2) {
          "string" != typeof t3 && "number" != typeof t3 || (t3 = { value: t3 });
          var s2 = e2.settings.dropdown.mapValueTo, a2 = s2 ? "function" == typeof s2 ? s2(t3) : t3[s2] : t3.value, n2 = c({}, t3, { value: a2 && "string" == typeof a2 ? d(a2) : a2, tagifySuggestionIdx: i2 });
          return e2.settings.templates.dropdownItem.call(e2, n2);
        }).join("");
      } }, u = { delimiters: ",", pattern: null, tagTextProp: "value", maxTags: 1 / 0, callbacks: {}, addTagOnBlur: true, duplicates: false, whitelist: [], blacklist: [], enforceWhitelist: false, keepInvalidTags: false, mixTagsAllowedAfter: /,|\.|\:|\s/, mixTagsInterpolator: ["[[", "]]"], backspace: true, skipInvalid: false, editTags: 2, transformTag: function() {
      }, trim: true, mixMode: { insertAfterTag: " " }, autoComplete: { enabled: true, rightKey: false }, classNames: { namespace: "tagify", input: "tagify__input", focus: "tagify--focus", tag: "tagify__tag", tagNoAnimation: "tagify--noAnim", tagInvalid: "tagify--invalid", tagNotAllowed: "tagify--notAllowed", inputInvalid: "tagify__input--invalid", tagX: "tagify__tag__removeBtn", tagText: "tagify__tag-text", dropdown: "tagify__dropdown", dropdownWrapper: "tagify__dropdown__wrapper", dropdownItem: "tagify__dropdown__item", dropdownItemActive: "tagify__dropdown__item--active", dropdownInital: "tagify__dropdown--initial", scopeLoading: "tagify--loading", tagLoading: "tagify__tag--loading", tagEditing: "tagify__tag--editable", tagFlash: "tagify__tag--flash", tagHide: "tagify__tag--hide", hasMaxTags: "tagify--hasMaxTags", hasNoTags: "tagify--noTags", empty: "tagify--empty" }, dropdown: { classname: "", enabled: 2, maxItems: 10, searchKeys: ["value", "searchBy"], fuzzySearch: true, caseSensitive: false, accentedSearch: true, highlightFirst: false, closeOnSelect: true, clearOnSelect: true, position: "all", appendTarget: null }, hooks: { beforeRemoveTag: function() {
        return Promise.resolve();
      }, suggestionClick: function() {
        return Promise.resolve();
      } } };
      var p = { customBinding: function() {
        var t2 = this;
        this.customEventsList.forEach(function(e2) {
          t2.on(e2, t2.settings.callbacks[e2]);
        });
      }, binding: function() {
        var t2, e2 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], i2 = this.events.callbacks, s2 = e2 ? "addEventListener" : "removeEventListener";
        if (!this.state.mainEvents || !e2)
          for (var a2 in this.state.mainEvents = e2, e2 && !this.listeners.main && (this.DOM.input.addEventListener(this.isIE ? "keydown" : "input", i2[this.isIE ? "onInputIE" : "onInput"].bind(this)), this.settings.isJQueryPlugin && jQuery(this.DOM.originalInput).on("tagify.removeAllTags", this.removeAllTags.bind(this))), t2 = this.listeners.main = this.listeners.main || { focus: ["input", i2.onFocusBlur.bind(this)], blur: ["input", i2.onFocusBlur.bind(this)], keydown: ["input", i2.onKeydown.bind(this)], click: ["scope", i2.onClickScope.bind(this)], dblclick: ["scope", i2.onDoubleClickScope.bind(this)], paste: ["input", i2.onPaste.bind(this)] })
            ("blur" != a2 || e2) && this.DOM[t2[a2][0]][s2](a2, t2[a2][1]);
      }, callbacks: { onFocusBlur: function(t2) {
        var e2 = t2.target ? this.trim(t2.target.textContent) : "", i2 = this.settings, s2 = t2.type, a2 = i2.dropdown.enabled >= 0, n2 = { relatedTarget: t2.relatedTarget }, o2 = this.state.actions.selectOption && (a2 || !i2.dropdown.closeOnSelect), r2 = this.state.actions.addNew && a2, l2 = window.getSelection();
        if ("blur" == s2) {
          if (t2.relatedTarget === this.DOM.scope)
            return this.dropdown.hide.call(this), void this.DOM.input.focus();
          this.postUpdate(), this.triggerChangeEvent();
        }
        if (!o2 && !r2)
          if (this.state.hasFocus = "focus" == s2 && +/* @__PURE__ */ new Date(), this.toggleFocusClass(this.state.hasFocus), "mix" != i2.mode) {
            if ("focus" == s2)
              return this.trigger("focus", n2), void (0 === i2.dropdown.enabled && this.dropdown.show.call(this));
            "blur" == s2 && (this.trigger("blur", n2), this.loading(false), ("select" == this.settings.mode ? !this.value.length || this.value[0].value != e2 : e2 && !this.state.actions.selectOption && i2.addTagOnBlur) && this.addTags(e2, true)), this.DOM.input.removeAttribute("style"), this.dropdown.hide.call(this);
          } else
            "focus" == s2 ? this.trigger("focus", n2) : "blur" == t2.type && (this.trigger("blur", n2), this.loading(false), this.dropdown.hide.call(this), this.state.dropdown.visible = void 0, this.state.selection = { anchorOffset: l2.anchorOffset, anchorNode: l2.anchorNode }, l2.getRangeAt && l2.rangeCount && (this.state.selection.range = l2.getRangeAt(0)));
      }, onKeydown: function(t2) {
        var e2 = this, i2 = this.trim(t2.target.textContent);
        if (this.trigger("keydown", { originalEvent: this.cloneEvent(t2) }), "mix" == this.settings.mode) {
          switch (t2.key) {
            case "Left":
            case "ArrowLeft":
              this.state.actions.ArrowLeft = true;
              break;
            case "Delete":
            case "Backspace":
              if (this.state.editing)
                return;
              var s2 = document.getSelection(), a2 = "Delete" == t2.key && s2.anchorOffset == s2.anchorNode.length, n2 = 1 == s2.anchorNode.nodeType || !s2.anchorOffset && s2.anchorNode.previousElementSibling, o2 = l(this.DOM.input.innerHTML), r2 = this.getTagElms();
              if (3 == s2.anchorNode.nodeType && !s2.anchorNode.nodeValue && s2.anchorNode.previousElementSibling && t2.preventDefault(), (n2 || a2) && !this.settings.backspace)
                return void t2.preventDefault();
              setTimeout(function() {
                if (l(e2.DOM.input.innerHTML).length >= o2.length && (e2.removeTags(s2.anchorNode.previousElementSibling), e2.fixFirefoxLastTagNoCaret(), 2 == e2.DOM.input.children.length && "BR" == e2.DOM.input.children[1].tagName))
                  return e2.DOM.input.innerHTML = "", e2.value.length = 0, true;
                e2.value = [].map.call(r2, function(t3, i3) {
                  var s3 = t3.__tagifyTagData;
                  if (t3.parentNode)
                    return s3;
                  e2.trigger("remove", { tag: t3, index: i3, data: s3 });
                }).filter(function(t3) {
                  return t3;
                });
              }, 50);
          }
          return true;
        }
        switch (t2.key) {
          case "Backspace":
            this.state.dropdown.visible && "manual" != this.settings.dropdown.position || "" != i2 && 8203 != i2.charCodeAt(0) || (true === this.settings.backspace ? this.removeTags() : "edit" == this.settings.backspace && setTimeout(this.editTag.bind(this), 0));
            break;
          case "Esc":
          case "Escape":
            if (this.state.dropdown.visible)
              return;
            t2.target.blur();
            break;
          case "Down":
          case "ArrowDown":
            this.state.dropdown.visible || this.dropdown.show.call(this);
            break;
          case "ArrowRight":
            var d2 = this.state.inputSuggestion || this.state.ddItemData;
            if (d2 && this.settings.autoComplete.rightKey)
              return void this.addTags([d2], true);
            break;
          case "Tab":
            if (i2 && t2.preventDefault(), !i2 || "select" == this.settings.mode)
              return true;
          case "Enter":
            if (this.state.dropdown.visible || 229 == t2.keyCode)
              return;
            t2.preventDefault(), setTimeout(function() {
              e2.state.actions.selectOption || e2.addTags(i2, true);
            });
        }
      }, onInput: function(t2) {
        if ("mix" == this.settings.mode)
          return this.events.callbacks.onMixTagsInput.call(this, t2);
        var e2 = this.input.normalize.call(this), i2 = e2.length >= this.settings.dropdown.enabled, s2 = { value: e2, inputElm: this.DOM.input };
        s2.isValid = this.validateTag({ value: e2 }), this.trigger("input", s2), this.input.value != e2 && (this.input.set.call(this, e2, false), -1 != e2.search(this.settings.delimiters) ? this.addTags(e2) && this.input.set.call(this) : this.settings.dropdown.enabled >= 0 && this.dropdown[i2 ? "show" : "hide"].call(this, e2));
      }, onMixTagsInput: function(t2) {
        var e2, i2, s2, a2, n2, o2, r2, l2, d2, h2 = this, g2 = this.settings, u2 = this.value.length, p2 = this.getTagElms(), f2 = [].map.call(p2, function(t3) {
          return h2.tagData(t3).value;
        });
        if (this.value.slice().forEach(function(t3) {
          t3.readonly && !f2.includes(t3.value) && h2.injectAtCaret(h2.createTagElem(t3), window.getSelection().getRangeAt(0));
        }), p2.length != u2)
          return this.value = [].map.call(this.getTagElms(), function(t3) {
            return t3.__tagifyTagData;
          }), void this.update({ withoutChangeEvent: true });
        if (this.hasMaxTags())
          return true;
        if (window.getSelection && (r2 = window.getSelection()).rangeCount > 0 && 3 == r2.anchorNode.nodeType) {
          if ((e2 = r2.getRangeAt(0).cloneRange()).collapse(true), e2.setStart(r2.focusNode, 0), a2 = (i2 = e2.toString().slice(0, e2.endOffset)).split(g2.pattern).length - 1, (s2 = i2.match(g2.pattern)) && (n2 = i2.slice(i2.lastIndexOf(s2[s2.length - 1]))), n2) {
            if (this.state.actions.ArrowLeft = false, this.state.tag = { prefix: n2.match(g2.pattern)[0], value: n2.replace(g2.pattern, "") }, this.state.tag.baseOffset = r2.baseOffset - this.state.tag.value.length, d2 = this.state.tag.value.match(g2.delimiters))
              return this.state.tag.value = this.state.tag.value.replace(g2.delimiters, ""), this.state.tag.delimiters = d2[0], this.addTags(this.state.tag.value, g2.dropdown.clearOnSelect), void this.dropdown.hide.call(this);
            o2 = this.state.tag.value.length >= g2.dropdown.enabled;
            try {
              l2 = (l2 = this.state.flaggedTags[this.state.tag.baseOffset]).prefix == this.state.tag.prefix && l2.value[0] == this.state.tag.value[0], this.state.flaggedTags[this.state.tag.baseOffset] && !this.state.tag.value && delete this.state.flaggedTags[this.state.tag.baseOffset];
            } catch (t3) {
            }
            (l2 || a2 < this.state.mixMode.matchedPatternCount) && (o2 = false);
          } else
            this.state.flaggedTags = {};
          this.state.mixMode.matchedPatternCount = a2;
        }
        setTimeout(function() {
          h2.update({ withoutChangeEvent: true }), h2.trigger("input", c({}, h2.state.tag, { textContent: h2.DOM.input.textContent })), h2.state.tag && h2.dropdown[o2 ? "show" : "hide"].call(h2, h2.state.tag.value);
        }, 10);
      }, onInputIE: function(t2) {
        var e2 = this;
        setTimeout(function() {
          e2.events.callbacks.onInput.call(e2, t2);
        });
      }, onClickScope: function(t2) {
        var e2 = t2.target.closest("." + this.settings.classNames.tag), i2 = this.settings, s2 = +/* @__PURE__ */ new Date() - this.state.hasFocus;
        if (t2.target != this.DOM.scope) {
          if (!t2.target.classList.contains(this.settings.classNames.tagX))
            return e2 ? (this.trigger("click", { tag: e2, index: this.getNodeIndex(e2), data: this.tagData(e2), originalEvent: this.cloneEvent(t2) }), void (1 == this.settings.editTags && this.events.callbacks.onDoubleClickScope.call(this, t2))) : void (t2.target == this.DOM.input && ("mix" == i2.mode && this.fixFirefoxLastTagNoCaret(), s2 > 500) ? this.state.dropdown.visible ? this.dropdown.hide.call(this) : 0 === i2.dropdown.enabled && "mix" != i2.mode && this.dropdown.show.call(this) : "select" == i2.mode && !this.state.dropdown.visible && this.dropdown.show.call(this));
          this.removeTags(t2.target.parentNode);
        } else
          this.state.hasFocus || this.DOM.input.focus();
      }, onPaste: function(t2) {
        var e2;
        t2.preventDefault(), e2 = (t2.clipboardData || window.clipboardData).getData("Text"), "mix" == this.settings.mode ? this.injectAtCaret(e2, window.getSelection().getRangeAt(0)) : this.addTags(e2);
      }, onEditTagInput: function(t2, e2) {
        var i2 = t2.closest("." + this.settings.classNames.tag), s2 = this.getNodeIndex(i2), a2 = this.tagData(i2), n2 = this.input.normalize.call(this, t2), o2 = n2 != a2.__originalData.value, r2 = this.validateTag({ value: n2 });
        o2 || true !== t2.originalIsValid || (r2 = true), i2.classList.toggle(this.settings.classNames.tagInvalid, true !== r2), a2.__isValid = r2, i2.title = true === r2 ? a2.title || a2.value : r2, n2.length >= this.settings.dropdown.enabled && (this.state.editing.value = n2, this.dropdown.show.call(this, n2)), this.trigger("edit:input", { tag: i2, index: s2, data: c({}, this.value[s2], { newValue: n2 }), originalEvent: this.cloneEvent(e2) });
      }, onEditTagFocus: function(t2) {
        this.state.editing = { scope: t2, input: t2.querySelector("[contenteditable]") };
      }, onEditTagBlur: function(t2) {
        if (this.state.hasFocus || this.toggleFocusClass(), this.DOM.scope.contains(t2)) {
          var e2 = t2.closest("." + this.settings.classNames.tag), i2 = this.input.normalize.call(this, t2), s2 = i2, a2 = c({}, this.tagData(e2), { value: s2 }), n2 = s2 != a2.__originalData.value, o2 = this.validateTag(a2);
          if (!i2)
            return this.removeTags(e2), void this.onEditTagDone(null, a2);
          n2 ? (this.settings.transformTag.call(this, a2), true === (o2 = this.validateTag(a2)) ? (a2 = this.getWhitelistItemByValue(s2) || a2.__preInvalidData || {}, a2 = Object.assign({}, a2, { value: s2 }), this.settings.transformTag.call(this, a2), this.onEditTagDone(e2, a2)) : this.trigger("invalid", { data: a2, tag: e2, message: o2 })) : this.onEditTagDone(e2, a2.__originalData);
        }
      }, onEditTagkeydown: function(t2, e2) {
        switch (this.trigger("edit:keydown", { originalEvent: this.cloneEvent(t2) }), t2.key) {
          case "Esc":
          case "Escape":
            t2.target.textContent = e2.__tagifyTagData.__originalData.value;
          case "Enter":
          case "Tab":
            t2.preventDefault(), t2.target.blur();
        }
      }, onDoubleClickScope: function(t2) {
        var e2, i2, s2 = t2.target.closest("." + this.settings.classNames.tag), a2 = this.settings;
        s2 && (e2 = s2.classList.contains(this.settings.classNames.tagEditing), i2 = s2.hasAttribute("readonly"), "select" == a2.mode || a2.readonly || e2 || i2 || !this.settings.editTags || this.editTag(s2), this.toggleFocusClass(true), this.trigger("dblclick", { tag: s2, index: this.getNodeIndex(s2), data: this.tagData(s2) }));
      } } };
      function f(t2, e2) {
        return t2.previousElementSibling && t2.previousElementSibling.classList.contains("tagify") ? (console.warn("Tagify: ", "input element is already Tagified", t2), this) : t2 ? (this.isFirefox = "undefined" != typeof InstallTrigger, this.isIE = window.document.documentMode, this.applySettings(t2, e2 || {}), this.state = { editing: false, actions: {}, mixMode: {}, dropdown: {}, flaggedTags: {} }, this.value = [], this.listeners = {}, this.DOM = {}, c(this, new this.EventDispatcher(this)), this.build(t2), this.getCSSVars(), this.loadOriginalValues(), this.events.customBinding.call(this), this.events.binding.call(this), void (t2.autofocus && this.DOM.input.focus())) : (console.warn("Tagify: ", "invalid input element ", t2), this);
      }
      return f.prototype = { dropdown: g, TEXTS: { empty: "empty", exceed: "number of tags exceeded", pattern: "pattern mismatch", duplicate: "already exists", notAllowed: "not allowed" }, DEFAULTS: u, customEventsList: ["change", "add", "remove", "invalid", "input", "click", "keydown", "focus", "blur", "edit:input", "edit:updated", "edit:start", "edit:keydown", "dropdown:show", "dropdown:hide", "dropdown:select", "dropdown:updated", "dropdown:noMatch"], trim: function(t2) {
        return this.settings.trim ? t2.trim() : t2;
      }, parseHTML: function(t2) {
        return new DOMParser().parseFromString(t2.trim(), "text/html").body.firstElementChild;
      }, templates: { wrapper: function(t2, e2) {
        return '<tags class="'.concat(e2.classNames.namespace, " ").concat(e2.mode ? "".concat(e2.classNames.namespace, "--").concat(e2.mode) : "", " ").concat(t2.className, '"\n                    ').concat(e2.readonly ? "readonly" : "", "\n                    ").concat(e2.required ? "required" : "", '\n                    tabIndex="-1">\n            <span ').concat(e2.readonly && "mix" == e2.mode ? "" : "contenteditable", ' data-placeholder="').concat(e2.placeholder || "&#8203;", '" aria-placeholder="').concat(e2.placeholder || "", '"\n                class="').concat(e2.classNames.input, '"\n                role="textbox"\n                aria-autocomplete="both"\n                aria-multiline="').concat("mix" == e2.mode, '"></span>\n        </tags>');
      }, tag: function(t2) {
        return '<tag title="'.concat(t2.title || t2.value, `"
                    contenteditable='false'
                    spellcheck='false'
                    tabIndex="-1"
                    class="`).concat(this.settings.classNames.tag, " ").concat(t2.class ? t2.class : "", '"\n                    ').concat(this.getAttributes(t2), `>
            <x title='' class="`).concat(this.settings.classNames.tagX, `" role='button' aria-label='remove tag'></x>
            <div>
                <span class="`).concat(this.settings.classNames.tagText, '">').concat(t2[this.settings.tagTextProp] || t2.value, "</span>\n            </div>\n        </tag>");
      }, dropdown: function(t2) {
        var e2 = t2.dropdown, i2 = "manual" == e2.position, s2 = "".concat(t2.classNames.dropdown);
        return '<div class="'.concat(i2 ? "" : s2, " ").concat(e2.classname, '" role="listbox" aria-labelledby="dropdown">\n                    <div class="').concat(t2.classNames.dropdownWrapper, '"></div>\n                </div>');
      }, dropdownItem: function(t2) {
        return "<div ".concat(this.getAttributes(t2), "\n                    class='").concat(this.settings.classNames.dropdownItem, " ").concat(t2.class ? t2.class : "", `'
                    tabindex="0"
                    role="option">`).concat(t2.value, "</div>");
      }, dropdownItemNoMatch: null }, parseTemplate: function(t2, e2) {
        return t2 = this.settings.templates[t2] || t2, this.parseHTML(t2.apply(this, e2));
      }, applySettings: function(t2, e2) {
        this.DEFAULTS.templates = this.templates;
        var i2 = this.settings = c({}, this.DEFAULTS, e2);
        if (i2.readonly = t2.hasAttribute("readonly"), i2.placeholder = t2.getAttribute("placeholder") || i2.placeholder || "", i2.required = t2.hasAttribute("required"), this.isIE && (i2.autoComplete = false), ["whitelist", "blacklist"].forEach(function(e3) {
          var s2 = t2.getAttribute("data-" + e3);
          s2 && (s2 = s2.split(i2.delimiters)) instanceof Array && (i2[e3] = s2);
        }), "autoComplete" in e2 && !r(e2.autoComplete) && (i2.autoComplete = this.DEFAULTS.autoComplete, i2.autoComplete.enabled = e2.autoComplete), "mix" == i2.mode && (i2.autoComplete.rightKey = true, i2.delimiters = e2.delimiters || null), t2.pattern)
          try {
            i2.pattern = new RegExp(t2.pattern);
          } catch (t3) {
          }
        if (this.settings.delimiters)
          try {
            i2.delimiters = new RegExp(this.settings.delimiters, "g");
          } catch (t3) {
          }
        "select" == i2.mode && (i2.dropdown.enabled = 0), i2.dropdown.appendTarget = e2.dropdown && e2.dropdown.appendTarget ? e2.dropdown.appendTarget : document.body;
      }, getAttributes: function(t2) {
        if ("[object Object]" != Object.prototype.toString.call(t2))
          return "";
        var e2, i2, s2 = Object.keys(t2), a2 = "";
        for (i2 = s2.length; i2--; )
          "class" != (e2 = s2[i2]) && t2.hasOwnProperty(e2) && void 0 !== t2[e2] && (a2 += " " + e2 + (void 0 !== t2[e2] ? '="'.concat(t2[e2], '"') : ""));
        return a2;
      }, getCaretGlobalPosition: function() {
        var t2 = document.getSelection();
        if (t2.rangeCount) {
          var e2, i2, s2 = t2.getRangeAt(0), a2 = s2.startContainer, n2 = s2.startOffset;
          if (n2 > 0)
            return (i2 = document.createRange()).setStart(a2, n2 - 1), i2.setEnd(a2, n2), { left: (e2 = i2.getBoundingClientRect()).right, top: e2.top, bottom: e2.bottom };
          if (a2.getBoundingClientRect)
            return a2.getBoundingClientRect();
        }
        return { left: -9999, top: -9999 };
      }, getCSSVars: function() {
        var t2, e2 = getComputedStyle(this.DOM.scope, null);
        this.CSSVars = { tagHideTransition: function(t3) {
          var e3 = t3.value;
          return "s" == t3.unit ? 1e3 * e3 : e3;
        }(function(t3) {
          if (!t3)
            return {};
          var e3 = (t3 = t3.trim().split(" ")[0]).split(/\d+/g).filter(function(t4) {
            return t4;
          }).pop().trim();
          return { value: +t3.split(e3).filter(function(t4) {
            return t4;
          })[0].trim(), unit: e3 };
        }((t2 = "tag-hide-transition", e2.getPropertyValue("--" + t2)))) };
      }, build: function(t2) {
        var e2 = this.DOM;
        this.settings.mixMode.integrated ? (e2.originalInput = null, e2.scope = t2, e2.input = t2) : (e2.originalInput = t2, e2.scope = this.parseTemplate("wrapper", [t2, this.settings]), e2.input = e2.scope.querySelector("." + this.settings.classNames.input), t2.parentNode.insertBefore(e2.scope, t2)), this.settings.dropdown.enabled >= 0 && this.dropdown.init.call(this);
      }, destroy: function() {
        this.DOM.scope.parentNode.removeChild(this.DOM.scope), this.dropdown.hide.call(this, true), clearTimeout(this.dropdownHide__bindEventsTimeout);
      }, loadOriginalValues: function(t2) {
        var e2, i2 = this.settings;
        if (t2 = t2 || i2.mixMode.integrated ? this.DOM.input.textContent : this.DOM.originalInput.value)
          if (this.removeAllTags(), "mix" == i2.mode)
            this.parseMixTags(t2.trim()), (e2 = this.DOM.input.lastChild) && "BR" == e2.tagName || this.DOM.input.insertAdjacentHTML("beforeend", "<br>");
          else {
            try {
              JSON.parse(t2) instanceof Array && (t2 = JSON.parse(t2));
            } catch (t3) {
            }
            this.addTags(t2).forEach(function(t3) {
              return t3 && t3.classList.add(i2.classNames.tagNoAnimation);
            });
          }
        else
          this.postUpdate();
        this.state.lastOriginalValueReported = i2.mixMode.integrated ? "" : this.DOM.originalInput.value, this.state.loadedOriginalValues = true;
      }, cloneEvent: function(t2) {
        var e2 = {};
        for (var i2 in t2)
          e2[i2] = t2[i2];
        return e2;
      }, EventDispatcher: function(e2) {
        var i2 = document.createTextNode("");
        function s2(t2, e3, s3) {
          s3 && e3.split(/\s+/g).forEach(function(e4) {
            return i2[t2 + "EventListener"].call(i2, e4, s3);
          });
        }
        this.off = function(t2, e3) {
          return s2("remove", t2, e3), this;
        }, this.on = function(t2, e3) {
          return e3 && "function" == typeof e3 && s2("add", t2, e3), this;
        }, this.trigger = function(s3, a2) {
          var n2;
          if (s3)
            if (e2.settings.isJQueryPlugin)
              "remove" == s3 && (s3 = "removeTag"), jQuery(e2.DOM.originalInput).triggerHandler(s3, [a2]);
            else {
              try {
                var o2 = c({}, "object" === t(a2) ? a2 : { value: a2 });
                if (o2.tagify = this, a2 instanceof Object)
                  for (var r2 in a2)
                    a2[r2] instanceof HTMLElement && (o2[r2] = a2[r2]);
                n2 = new CustomEvent(s3, { detail: o2 });
              } catch (t2) {
                console.warn(t2);
              }
              i2.dispatchEvent(n2);
            }
        };
      }, loading: function(t2) {
        return this.state.isLoading = t2, this.DOM.scope.classList[t2 ? "add" : "remove"](this.settings.classNames.scopeLoading), this;
      }, tagLoading: function(t2, e2) {
        return t2 && t2.classList[e2 ? "add" : "remove"](this.settings.classNames.tagLoading), this;
      }, toggleFocusClass: function(t2) {
        this.DOM.scope.classList.toggle(this.settings.classNames.focus, !!t2);
      }, triggerChangeEvent: function() {
        if (!this.settings.mixMode.integrated) {
          var t2 = this.DOM.originalInput, e2 = this.state.lastOriginalValueReported !== t2.value, i2 = new CustomEvent("change", { bubbles: true });
          e2 && (this.state.lastOriginalValueReported = t2.value, i2.simulated = true, t2._valueTracker && t2._valueTracker.setValue(Math.random()), t2.dispatchEvent(i2), this.trigger("change", this.state.lastOriginalValueReported), t2.value = this.state.lastOriginalValueReported);
        }
      }, events: p, fixFirefoxLastTagNoCaret: function() {
        var t2 = this.DOM.input;
        if (this.isFirefox && t2.childNodes.length && 1 == t2.lastChild.nodeType)
          return t2.appendChild(document.createTextNode("​")), this.setRangeAtStartEnd(true), true;
      }, placeCaretAfterNode: function(t2) {
        var e2 = t2.nextSibling, i2 = window.getSelection(), s2 = i2.getRangeAt(0);
        i2.rangeCount && (s2.setStartBefore(e2 || t2), s2.setEndBefore(e2 || t2), i2.removeAllRanges(), i2.addRange(s2));
      }, insertAfterTag: function(t2, e2) {
        if (e2 = e2 || this.settings.mixMode.insertAfterTag, t2 && e2)
          return e2 = "string" == typeof e2 ? document.createTextNode(e2) : e2, t2.appendChild(e2), t2.parentNode.insertBefore(e2, t2.nextSibling), e2;
      }, editTag: function(t2, e2) {
        var i2 = this;
        t2 = t2 || this.getLastTag(), e2 = e2 || {}, this.dropdown.hide.call(this);
        var s2 = t2.querySelector("." + this.settings.classNames.tagText), a2 = this.getNodeIndex(t2), n2 = t2.__tagifyTagData, o2 = this.events.callbacks, r2 = this, l2 = true;
        if (s2) {
          if (!(n2 instanceof Object && "editable" in n2) || n2.editable)
            return t2.__tagifyTagData.__originalData = c({}, n2), t2.classList.add(this.settings.classNames.tagEditing), s2.setAttribute("contenteditable", true), s2.addEventListener("focus", o2.onEditTagFocus.bind(this, t2)), s2.addEventListener("blur", function() {
              setTimeout(o2.onEditTagBlur.bind(r2), 0, s2);
            }), s2.addEventListener("input", o2.onEditTagInput.bind(this, s2)), s2.addEventListener("keydown", function(e3) {
              return o2.onEditTagkeydown.call(i2, e3, t2);
            }), s2.focus(), this.setRangeAtStartEnd(false, s2), e2.skipValidation || (l2 = this.editTagToggleValidity(t2, n2.value)), s2.originalIsValid = l2, this.trigger("edit:start", { tag: t2, index: a2, data: n2, isValid: l2 }), this;
        } else
          console.warn("Cannot find element in Tag template: .", this.settings.classNames.tagText);
      }, editTagToggleValidity: function(t2, e2) {
        var i2, s2 = t2.__tagifyTagData;
        if (s2)
          return i2 = !(!s2.__isValid || 1 == s2.__isValid), t2.classList.toggle(this.settings.classNames.tagInvalid, i2), s2.__isValid;
        console.warn("tag has no data: ", t2, s2);
      }, onEditTagDone: function(t2, e2) {
        this.state.editing = false, e2 = e2 || {};
        var i2 = { tag: t2, index: this.getNodeIndex(t2), data: e2 };
        this.trigger("edit:beforeUpdate", i2), delete e2.__originalData, t2 && (this.editTagToggleValidity(t2), this.replaceTag(t2, e2)), this.trigger("edit:updated", i2), this.dropdown.hide.call(this), this.settings.keepInvalidTags && this.reCheckInvalidTags();
      }, replaceTag: function(t2, e2) {
        e2 && e2.value || (e2 = t2.__tagifyTagData), e2.__isValid && 1 != e2.__isValid && c(e2, this.getInvalidTagParams(e2, e2.__isValid));
        var i2 = this.createTagElem(e2);
        t2.parentNode.replaceChild(i2, t2), this.updateValueByDOMTags();
      }, updateValueByDOMTags: function() {
        var t2 = this;
        this.value.length = 0, [].forEach.call(this.getTagElms(), function(e2) {
          e2.classList.contains(t2.settings.classNames.tagNotAllowed) || t2.value.push(t2.tagData(e2));
        }), this.update();
      }, setRangeAtStartEnd: function(t2, e2) {
        t2 = "number" == typeof t2 ? t2 : !!t2, e2 = (e2 = e2 || this.DOM.input).lastChild || e2;
        var i2 = document.getSelection();
        try {
          i2.rangeCount >= 1 && ["Start", "End"].forEach(function(s2) {
            return i2.getRangeAt(0)["set" + s2](e2, t2 || e2.length);
          });
        } catch (t3) {
          console.warn("Tagify: ", t3);
        }
      }, injectAtCaret: function(t2, e2) {
        if (e2 = e2 || this.state.selection.range)
          return "string" == typeof t2 && (t2 = document.createTextNode(t2)), e2.deleteContents(), e2.insertNode(t2), this.setRangeAtStartEnd(false, t2), this.updateValueByDOMTags(), this.update(), this;
      }, input: { value: "", set: function() {
        var t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "", e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = this.settings.dropdown.closeOnSelect;
        this.input.value = t2, e2 && (this.DOM.input.innerHTML = t2), !t2 && i2 && this.dropdown.hide.bind(this), this.input.autocomplete.suggest.call(this), this.input.validate.call(this);
      }, validate: function() {
        var t2 = !this.input.value || true === this.validateTag({ value: this.input.value });
        return this.DOM.input.classList.toggle(this.settings.classNames.inputInvalid, !t2), t2;
      }, normalize: function(t2) {
        var e2 = t2 || this.DOM.input, i2 = [];
        e2.childNodes.forEach(function(t3) {
          return 3 == t3.nodeType && i2.push(t3.nodeValue);
        }), i2 = i2.join("\n");
        try {
          i2 = i2.replace(/(?:\r\n|\r|\n)/g, this.settings.delimiters.source.charAt(0));
        } catch (t3) {
        }
        return i2 = i2.replace(/\s/g, " "), this.settings.trim && (i2 = i2.replace(/^\s+/, "")), i2;
      }, autocomplete: { suggest: function(t2) {
        if (this.settings.autoComplete.enabled) {
          "string" == typeof (t2 = t2 || {}) && (t2 = { value: t2 });
          var e2 = t2.value ? "" + t2.value : "", i2 = e2.substr(0, this.input.value.length).toLowerCase(), s2 = e2.substring(this.input.value.length);
          e2 && this.input.value && i2 == this.input.value.toLowerCase() ? (this.DOM.input.setAttribute("data-suggest", s2), this.state.inputSuggestion = t2) : (this.DOM.input.removeAttribute("data-suggest"), delete this.state.inputSuggestion);
        }
      }, set: function(t2) {
        var e2 = this.DOM.input.getAttribute("data-suggest"), i2 = t2 || (e2 ? this.input.value + e2 : null);
        return !!i2 && ("mix" == this.settings.mode ? this.replaceTextWithNode(document.createTextNode(this.state.tag.prefix + i2)) : (this.input.set.call(this, i2), this.setRangeAtStartEnd()), this.input.autocomplete.suggest.call(this), this.dropdown.hide.call(this), true);
      } } }, getTagIdx: function(t2) {
        return this.value.findIndex(function(e2) {
          return JSON.stringify(e2) == JSON.stringify(t2);
        });
      }, getNodeIndex: function(t2) {
        var e2 = 0;
        if (t2)
          for (; t2 = t2.previousElementSibling; )
            e2++;
        return e2;
      }, getTagElms: function() {
        for (var t2 = arguments.length, e2 = new Array(t2), i2 = 0; i2 < t2; i2++)
          e2[i2] = arguments[i2];
        var s2 = ["." + this.settings.classNames.tag].concat(e2).join(".");
        return this.DOM.scope.querySelectorAll(s2);
      }, getLastTag: function() {
        var t2 = this.DOM.scope.querySelectorAll(".".concat(this.settings.classNames.tag, ":not(.").concat(this.settings.classNames.tagHide, "):not([readonly])"));
        return t2[t2.length - 1];
      }, tagData: function(t2, e2) {
        return t2 ? (e2 && (t2.__tagifyTagData = c({}, t2.__tagifyTagData || {}, e2)), t2.__tagifyTagData) : (console.warn("tag elment doesn't exist", t2, e2), e2);
      }, isTagDuplicate: function(t2, e2) {
        var i2 = this, s2 = this.settings;
        return "select" != s2.mode && this.value.reduce(function(a2, n2) {
          return o(i2.trim("" + t2), n2.value, e2 || s2.dropdown.caseSensitive) ? a2 + 1 : a2;
        }, 0);
      }, getTagIndexByValue: function(t2) {
        var e2 = this, i2 = [];
        return this.getTagElms().forEach(function(s2, a2) {
          o(e2.trim(s2.textContent), t2, e2.settings.dropdown.caseSensitive) && i2.push(a2);
        }), i2;
      }, getTagElmByValue: function(t2) {
        var e2 = this.getTagIndexByValue(t2)[0];
        return this.getTagElms()[e2];
      }, flashTag: function(t2) {
        var e2 = this;
        t2 && (t2.classList.add(this.settings.classNames.tagFlash), setTimeout(function() {
          t2.classList.remove(e2.settings.classNames.tagFlash);
        }, 100));
      }, isTagBlacklisted: function(t2) {
        return t2 = this.trim(t2.toLowerCase()), this.settings.blacklist.filter(function(e2) {
          return ("" + e2).toLowerCase() == t2;
        }).length;
      }, isTagWhitelisted: function(t2) {
        var e2 = this;
        return this.settings.whitelist.some(function(i2) {
          return "string" == typeof t2 ? o(e2.trim(t2), i2.value || i2) : o(JSON.stringify(i2), JSON.stringify(t2));
        });
      }, validateTag: function(t2) {
        var e2 = this.trim(t2.value), i2 = this.settings;
        return t2.value.trim() ? i2.pattern && i2.pattern instanceof RegExp && !i2.pattern.test(e2) ? this.TEXTS.pattern : !i2.duplicates && this.isTagDuplicate(e2, this.state.editing) ? this.TEXTS.duplicate : !(this.isTagBlacklisted(e2) || i2.enforceWhitelist && !this.isTagWhitelisted(e2)) || this.TEXTS.notAllowed : this.TEXTS.empty;
      }, getInvalidTagParams: function(t2, e2) {
        return { "aria-invalid": true, class: "".concat(t2.class || "", " ").concat(this.settings.classNames.tagNotAllowed).trim(), title: e2 };
      }, hasMaxTags: function() {
        return this.value.length >= this.settings.maxTags && this.TEXTS.exceed;
      }, normalizeTags: function(t2) {
        var e2 = this, i2 = this.settings, s2 = i2.whitelist, n2 = i2.delimiters, o2 = i2.mode, r2 = !!s2 && s2[0] instanceof Object, l2 = t2 instanceof Array, d2 = [], c2 = function(t3) {
          return (t3 + "").split(n2).filter(function(t4) {
            return t4;
          }).map(function(t4) {
            return { value: e2.trim(t4) };
          });
        };
        if ("number" == typeof t2 && (t2 = t2.toString()), "string" == typeof t2) {
          if (!t2.trim())
            return [];
          t2 = c2(t2);
        } else if (l2) {
          var h2;
          t2 = (h2 = []).concat.apply(h2, a(t2.map(function(t3) {
            return t3.value ? t3 : c2(t3);
          })));
        }
        return r2 && (t2.forEach(function(t3) {
          var i3 = e2.getWhitelistItemByValue(t3.value);
          i3 && i3 instanceof Object ? d2.push(i3) : "mix" != o2 && d2.push(t3);
        }), d2.length && (t2 = d2)), t2;
      }, getWhitelistItemByValue: function(t2) {
        var e2, i2 = this.settings;
        return i2.whitelist.some(function(s2) {
          if (o("string" == typeof s2 ? s2 : s2.value, t2, i2.dropdown.caseSensitive))
            return e2 = "string" == typeof s2 ? { value: s2 } : s2, true;
        }), e2;
      }, parseMixTags: function(t2) {
        var e2 = this, i2 = this.settings, s2 = i2.mixTagsInterpolator, a2 = i2.duplicates, n2 = i2.transformTag, o2 = i2.enforceWhitelist, r2 = i2.maxTags, l2 = [];
        return t2 = t2.split(s2[0]).map(function(t3, i3) {
          var d2, c2, h2 = t3.split(s2[1]), g2 = h2[0], u2 = l2.length == r2;
          try {
            if (g2 == +g2)
              throw Error;
            d2 = JSON.parse(g2);
          } catch (t4) {
            d2 = e2.normalizeTags(g2)[0];
          }
          if (u2 || !(h2.length > 1) || o2 && !e2.isTagWhitelisted(d2.value) || !a2 && e2.isTagDuplicate(d2.value)) {
            if (t3)
              return i3 ? s2[0] + t3 : t3;
          } else
            n2.call(e2, d2), c2 = e2.createTagElem(d2), l2.push(d2), c2.classList.add(e2.settings.classNames.tagNoAnimation), h2[0] = c2.outerHTML, e2.value.push(d2);
          return h2.join("");
        }).join(""), this.DOM.input.innerHTML = t2, this.DOM.input.appendChild(document.createTextNode("")), this.DOM.input.normalize(), this.getTagElms().forEach(function(t3, i3) {
          return e2.tagData(t3, l2[i3]);
        }), this.update({ withoutChangeEvent: true }), t2;
      }, replaceTextWithNode: function(t2, e2) {
        if (this.state.tag || e2) {
          e2 = e2 || this.state.tag.prefix + this.state.tag.value;
          var i2, s2, a2 = window.getSelection(), n2 = a2.anchorNode, o2 = this.state.tag.delimiters ? this.state.tag.delimiters.length : 0;
          return n2.splitText(a2.anchorOffset - o2), i2 = n2.nodeValue.lastIndexOf(e2), s2 = n2.splitText(i2), t2 && n2.parentNode.replaceChild(t2, s2), true;
        }
      }, selectTag: function(t2, e2) {
        if (!this.settings.enforceWhitelist || this.isTagWhitelisted(e2.value))
          return this.input.set.call(this, e2.value, true), this.state.actions.selectOption && setTimeout(this.setRangeAtStartEnd.bind(this)), this.getLastTag() ? this.replaceTag(this.getLastTag(), e2) : this.appendTag(t2), this.value[0] = e2, this.trigger("add", { tag: t2, data: e2 }), this.update(), [t2];
      }, addEmptyTag: function(t2) {
        var e2 = c({ value: "" }, t2 || {}), i2 = this.createTagElem(e2);
        this.tagData(i2, e2), this.appendTag(i2), this.editTag(i2, { skipValidation: true });
      }, addTags: function(t2, e2) {
        var i2 = this, s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.settings.skipInvalid, a2 = [], n2 = this.settings;
        return t2 && 0 != t2.length ? (t2 = this.normalizeTags(t2), "mix" == n2.mode ? this.addMixTags(t2) : ("select" == n2.mode && (e2 = false), this.DOM.input.removeAttribute("style"), t2.forEach(function(t3) {
          var e3, o2 = {}, r2 = Object.assign({}, t3, { value: t3.value + "" });
          if ((t3 = Object.assign({}, r2)).__isValid = i2.hasMaxTags() || i2.validateTag(t3), n2.transformTag.call(i2, t3), true !== t3.__isValid) {
            if (s2)
              return;
            c(o2, i2.getInvalidTagParams(t3, t3.__isValid), { __preInvalidData: r2 }), t3.__isValid == i2.TEXTS.duplicate && i2.flashTag(i2.getTagElmByValue(t3.value));
          }
          if (t3.readonly && (o2["aria-readonly"] = true), e3 = i2.createTagElem(c({}, t3, o2)), a2.push(e3), "select" == n2.mode)
            return i2.selectTag(e3, t3);
          i2.appendTag(e3), t3.__isValid && true === t3.__isValid ? (i2.value.push(t3), i2.update(), i2.trigger("add", { tag: e3, index: i2.value.length - 1, data: t3 })) : (i2.trigger("invalid", { data: t3, index: i2.value.length, tag: e3, message: t3.__isValid }), n2.keepInvalidTags || setTimeout(function() {
            return i2.removeTags(e3, true);
          }, 1e3)), i2.dropdown.position.call(i2);
        }), t2.length && e2 && this.input.set.call(this), this.dropdown.refilter.call(this), a2)) : ("select" == n2.mode && this.removeAllTags(), a2);
      }, addMixTags: function(t2) {
        var e2, i2 = this, s2 = this.settings, a2 = this.state.tag.delimiters;
        return s2.transformTag.call(this, t2[0]), t2[0].prefix = t2[0].prefix || this.state.tag ? this.state.tag.prefix : (s2.pattern.source || s2.pattern)[0], e2 = this.createTagElem(t2[0]), this.replaceTextWithNode(e2) || this.DOM.input.appendChild(e2), setTimeout(function() {
          return e2.classList.add(i2.settings.classNames.tagNoAnimation);
        }, 300), this.value.push(t2[0]), this.update(), !a2 && setTimeout(function() {
          var t3 = i2.insertAfterTag(e2) || e2;
          i2.placeCaretAfterNode(t3);
        }, this.isFirefox ? 100 : 0), this.state.tag = null, this.trigger("add", c({}, { tag: e2 }, { data: t2[0] })), e2;
      }, appendTag: function(t2) {
        var e2 = this.DOM.scope.lastElementChild;
        e2 === this.DOM.input ? this.DOM.scope.insertBefore(t2, e2) : this.DOM.scope.appendChild(t2);
      }, createTagElem: function(t2) {
        var e2, i2 = c({}, t2, { value: d(t2.value + "") });
        return this.settings.readonly && (t2.readonly = true), e2 = this.parseTemplate("tag", [i2]), this.tagData(e2, t2), e2;
      }, reCheckInvalidTags: function() {
        var t2 = this, e2 = this.settings, i2 = ".".concat(e2.classNames.tag, ".").concat(e2.classNames.tagNotAllowed), s2 = this.DOM.scope.querySelectorAll(i2);
        [].forEach.call(s2, function(e3) {
          var i3 = t2.tagData(e3), s3 = e3.getAttribute("title") == t2.TEXTS.duplicate, a2 = true === t2.validateTag(i3);
          s3 && a2 && (i3 = i3.__preInvalidData ? i3.__preInvalidData : { value: i3.value }, t2.replaceTag(e3, i3));
        });
      }, removeTags: function(t2, e2, i2) {
        var s2, a2 = this;
        t2 = t2 && t2 instanceof HTMLElement ? [t2] : t2 instanceof Array ? t2 : t2 ? [t2] : [this.getLastTag()], s2 = t2.reduce(function(t3, e3) {
          return e3 && "string" == typeof e3 && (e3 = a2.getTagElmByValue(e3)), e3 && t3.push({ node: e3, idx: a2.getTagIdx(a2.tagData(e3)), data: a2.tagData(e3, { __removed: true }) }), t3;
        }, []), i2 = "number" == typeof i2 ? i2 : this.CSSVars.tagHideTransition, "select" == this.settings.mode && (i2 = 0, this.input.set.call(this)), 1 == s2.length && s2[0].node.classList.contains(this.settings.classNames.tagNotAllowed) && (e2 = true), s2.length && this.settings.hooks.beforeRemoveTag(s2, { tagify: this }).then(function() {
          function t3(t4) {
            t4.node.parentNode && (t4.node.parentNode.removeChild(t4.node), e2 ? this.settings.keepInvalidTags && this.trigger("remove", { tag: t4.node, index: t4.idx }) : (this.trigger("remove", { tag: t4.node, index: t4.idx, data: t4.data }), this.dropdown.refilter.call(this), this.dropdown.position.call(this), this.DOM.input.normalize(), this.settings.keepInvalidTags && this.reCheckInvalidTags()));
          }
          i2 && i2 > 10 && 1 == s2.length ? (function(e3) {
            e3.node.style.width = parseFloat(window.getComputedStyle(e3.node).width) + "px", document.body.clientTop, e3.node.classList.add(this.settings.classNames.tagHide), setTimeout(t3.bind(this), i2, e3);
          }).call(a2, s2[0]) : s2.forEach(t3.bind(a2)), e2 || (s2.forEach(function(t4) {
            var e3 = Object.assign({}, t4.data);
            delete e3.__removed;
            var i3 = a2.getTagIdx(e3);
            i3 > -1 && a2.value.splice(i3, 1);
          }), a2.update());
        }).catch(function(t3) {
        });
      }, removeAllTags: function() {
        this.value = [], "mix" == this.settings.mode ? this.DOM.input.innerHTML = "" : Array.prototype.slice.call(this.getTagElms()).forEach(function(t2) {
          return t2.parentNode.removeChild(t2);
        }), this.dropdown.position.call(this), "select" == this.settings.mode && this.input.set.call(this), this.update();
      }, postUpdate: function() {
        var t2 = this.settings.classNames, e2 = "mix" == this.settings.mode ? this.settings.mixMode.integrated ? this.DOM.input.textContent : this.DOM.originalInput.value : this.value.length;
        this.DOM.scope.classList.toggle(t2.hasMaxTags, this.value.length >= this.settings.maxTags), this.DOM.scope.classList.toggle(t2.hasNoTags, !this.value.length), this.DOM.scope.classList.toggle(t2.empty, !e2);
      }, update: function(t2) {
        var e2, i2, s2 = this.DOM.originalInput, a2 = (t2 || {}).withoutChangeEvent, n2 = (e2 = this.value, i2 = ["__isValid", "__removed"], e2.map(function(t3) {
          var e3 = {};
          for (var s3 in t3)
            i2.indexOf(s3) < 0 && (e3[s3] = t3[s3]);
          return e3;
        }));
        this.settings.mixMode.integrated || (s2.value = "mix" == this.settings.mode ? this.getMixedTagsAsString(n2) : n2.length ? this.settings.originalInputValueFormat ? this.settings.originalInputValueFormat(n2) : JSON.stringify(n2) : ""), this.postUpdate(), !a2 && this.state.loadedOriginalValues && this.triggerChangeEvent();
      }, getMixedTagsAsString: function() {
        var t2 = "", e2 = this, i2 = this.settings.mixTagsInterpolator;
        return function s2(a2) {
          a2.childNodes.forEach(function(a3) {
            if (1 == a3.nodeType) {
              if (a3.classList.contains(e2.settings.classNames.tag) && e2.tagData(a3)) {
                if (e2.tagData(a3).__removed)
                  return;
                return void (t2 += i2[0] + JSON.stringify(a3.__tagifyTagData) + i2[1]);
              }
              "BR" != a3.tagName || a3.parentNode != e2.DOM.input && 1 != a3.parentNode.childNodes.length ? "DIV" != a3.tagName && "P" != a3.tagName || (t2 += "\r\n", s2(a3)) : t2 += "\r\n";
            } else
              t2 += a3.textContent;
          });
        }(this.DOM.input), t2;
      } }, f.prototype.removeTag = f.prototype.removeTags, f;
    });
  }
});

export {
  require_tagify_min
};
//# sourceMappingURL=chunk-HRSM2SQW.js.map
